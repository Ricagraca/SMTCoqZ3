type token =
  | EOF
  | EOL
  | LPAR
  | RPAR
  | COLON
  | PROOF
  | SETLOGIC
  | MP
  | ASSERTED
  | REWRITE
  | NOT
  | TRUE
  | FALSE
  | EQUAL
  | VAR of (string)
  | QFUF

open Parsing;;
let _ = parse_error;;
# 2 "z3Parser.mly"
(**************************************************************************)
(*                                                                        *)
(*     SMTCoq                                                             *)
(*     Copyright (C) 2011 - 2021                                          *)
(*                                                                        *)
(*     See file "AUTHORS" for the list of authors                         *)
(*                                                                        *)
(*   This file is distributed under the terms of the CeCILL-C licence     *)
(*                                                                        *)
(**************************************************************************)


open Printf  


let parse_bv s =
  let l = ref [] in
  for i = 2 to String.length s - 1 do
    match s.[i] with
    | '0' -> l := false :: !l
    | '1' -> l := true :: !l
    | _ -> assert false
  done;
  !l

    
# 49 "z3Parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* EOL *);
  258 (* LPAR *);
  259 (* RPAR *);
  260 (* COLON *);
  261 (* PROOF *);
  262 (* SETLOGIC *);
  263 (* MP *);
  264 (* ASSERTED *);
  265 (* REWRITE *);
  266 (* NOT *);
  267 (* TRUE *);
  268 (* FALSE *);
  269 (* EQUAL *);
  271 (* QFUF *);
    0|]

let yytransl_block = [|
  270 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\004\000\003\000\005\000\007\000\007\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\006\000\
\006\000\006\000\000\000"

let yylen = "\002\000\
\005\000\005\000\004\000\001\000\004\000\004\000\001\000\002\000\
\001\000\003\000\001\000\001\000\003\000\002\000\001\000\001\000\
\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\
\002\000\001\000\016\000\017\000\018\000\000\000\005\000\000\000\
\000\000\011\000\012\000\000\000\015\000\009\000\000\000\007\000\
\000\000\014\000\000\000\006\000\008\000\010\000\013\000"

let yydgoto = "\002\000\
\004\000\006\000\009\000\011\000\030\000\022\000\031\000\032\000"

let yysindex = "\014\000\
\014\255\000\000\015\255\000\000\013\255\018\255\019\255\028\255\
\033\255\000\000\034\255\037\255\001\000\000\000\251\254\038\255\
\000\000\000\000\000\000\000\000\000\000\016\255\000\000\254\254\
\016\255\000\000\000\000\016\255\000\000\000\000\011\255\000\000\
\040\255\000\000\016\255\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\007\000"

let yytablesize = 258
let yytable = "\024\000\
\017\000\019\000\020\000\021\000\019\000\020\000\021\000\025\000\
\026\000\027\000\028\000\029\000\024\000\036\000\001\000\003\000\
\005\000\024\000\007\000\008\000\025\000\026\000\027\000\028\000\
\029\000\025\000\026\000\027\000\028\000\029\000\033\000\034\000\
\012\000\010\000\035\000\013\000\014\000\037\000\015\000\016\000\
\023\000\039\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000"

let yycheck = "\002\001\
\000\000\007\001\008\001\009\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\002\001\003\001\001\000\002\001\
\002\001\002\001\006\001\002\001\010\001\011\001\012\001\013\001\
\014\001\010\001\011\001\012\001\013\001\014\001\024\000\025\000\
\005\001\015\001\028\000\003\001\003\001\031\000\002\001\012\000\
\003\001\035\000\003\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001"

let yynames_const = "\
  EOF\000\
  EOL\000\
  LPAR\000\
  RPAR\000\
  COLON\000\
  PROOF\000\
  SETLOGIC\000\
  MP\000\
  ASSERTED\000\
  REWRITE\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  EQUAL\000\
  QFUF\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'setlogic) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    Obj.repr(
# 54 "z3Parser.mly"
                                   ()
# 210 "z3Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'setlogic) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    Obj.repr(
# 55 "z3Parser.mly"
                                   ()
# 218 "z3Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'logic) in
    Obj.repr(
# 58 "z3Parser.mly"
                               ( printf ("set-logic ");)
# 225 "z3Parser.ml"
               : 'setlogic))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "z3Parser.mly"
           ( printf ("QF_UF "); )
# 231 "z3Parser.ml"
               : 'logic))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rule_list) in
    Obj.repr(
# 65 "z3Parser.mly"
                                ( printf ("proof "); ZProof  )
# 238 "z3Parser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term_list) in
    Obj.repr(
# 68 "z3Parser.mly"
                              ( ZRule _2 _3 )
# 246 "z3Parser.ml"
               : 'rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 71 "z3Parser.mly"
                     ( [_1] )
# 253 "z3Parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 72 "z3Parser.mly"
                     ( _2::_1 )
# 261 "z3Parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rule_list) in
    Obj.repr(
# 75 "z3Parser.mly"
                     (  )
# 268 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 76 "z3Parser.mly"
                     (  )
# 275 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "z3Parser.mly"
                     ( printf ("true "); ZTrue )
# 281 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "z3Parser.mly"
                     ( printf ("false "); ZFalse )
# 287 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 79 "z3Parser.mly"
                      (  printf ("equal "); ZEqual _2 _3 )
# 295 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 80 "z3Parser.mly"
               (  printf ("not "); ZNot _2 )
# 302 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "z3Parser.mly"
                     (  )
# 309 "z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "z3Parser.mly"
                     (printf ("mp "); ZMp )
# 315 "z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "z3Parser.mly"
                     (printf ("asserted "); ZAsserted )
# 321 "z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "z3Parser.mly"
                     (printf ("rewrite "); ZRewrite )
# 327 "z3Parser.ml"
               : 'typ))
(* Entry line *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let line (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
