type token =
  | EOL
  | SAT
  | COLON
  | LPAR
  | RPAR
  | LBRACKET
  | RBRACKET
  | NOT
  | XOR
  | ITE
  | EQ
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUS
  | MINUS
  | MULT
  | OPP
  | LET
  | DIST
  | BBT
  | BITOF
  | BVAND
  | BVOR
  | BVXOR
  | BVADD
  | BVMUL
  | BVULT
  | BVSLT
  | BVULE
  | BVSLE
  | BVCONC
  | BVEXTR
  | BVZEXT
  | BVSEXT
  | BVNOT
  | BVNEG
  | SELECT
  | STORE
  | DIFF
  | BVSHL
  | BVSHR
  | TBOOL
  | TINT
  | TINDEX of (int)
  | INPU
  | DEEP
  | TRUE
  | FALS
  | ANDP
  | ANDN
  | ORP
  | ORN
  | XORP1
  | XORP2
  | XORN1
  | XORN2
  | IMPP
  | IMPN1
  | IMPN2
  | EQUP1
  | EQUP2
  | EQUN1
  | EQUN2
  | ITEP1
  | ITEP2
  | ITEN1
  | ITEN2
  | EQRE
  | EQTR
  | EQCO
  | EQCP
  | DLGE
  | LAGE
  | LATA
  | DLDE
  | LADE
  | FINS
  | EINS
  | SKEA
  | SKAA
  | QNTS
  | QNTM
  | RESO
  | WEAK
  | AND
  | NOR
  | OR
  | NAND
  | XOR1
  | XOR2
  | NXOR1
  | NXOR2
  | IMP
  | NIMP1
  | NIMP2
  | EQU1
  | EQU2
  | NEQU1
  | NEQU2
  | ITE1
  | ITE2
  | NITE1
  | NITE2
  | TPAL
  | TLAP
  | TPLE
  | TPNE
  | TPDE
  | TPSA
  | TPIE
  | TPMA
  | TPBR
  | TPBE
  | TPSC
  | TPPP
  | TPQT
  | TPQS
  | TPSK
  | SUBP
  | FLAT
  | HOLE
  | FORALL
  | BBVA
  | BBCONST
  | BBEXTR
  | BBZEXT
  | BBSEXT
  | BBEQ
  | BBDIS
  | BBOP
  | BBADD
  | BBMUL
  | BBULT
  | BBSLT
  | BBNOT
  | BBNEG
  | BBCONC
  | ROW1
  | ROW2
  | EXTE
  | BBSHL
  | BBSHR
  | INT of (int)
  | SHARPINT of (int)
  | BIGINT of (Big_int.big_int)
  | VAR of (string)
  | BINDVAR of (string)
  | ATVAR of (string)
  | BITV of (string)

open Parsing;;
let _ = parse_error;;
# 2 "z3/z3Parser.mly"
(**************************************************************************)
(*                                                                        *)
(*     SMTCoq                                                             *)
(*     Copyright (C) 2011 - 2021                                          *)
(*                                                                        *)
(*     See file "AUTHORS" for the list of authors                         *)
(*                                                                        *)
(*   This file is distributed under the terms of the CeCILL-C licence     *)
(*                                                                        *)
(**************************************************************************)


  open SmtBtype
  open SmtAtom
  open SmtForm
  open Z3Syntax



  let parse_bv s =
    let l = ref [] in
    for i = 2 to String.length s - 1 do
      match s.[i] with
      | '0' -> l := false :: !l
      | '1' -> l := true :: !l
      | _ -> assert false
    done;
    !l

# 187 "z3/z3Parser.ml"
let yytransl_const = [|
  257 (* EOL *);
  258 (* SAT *);
  259 (* COLON *);
  260 (* LPAR *);
  261 (* RPAR *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* NOT *);
  265 (* XOR *);
  266 (* ITE *);
  267 (* EQ *);
  268 (* LT *);
  269 (* LEQ *);
  270 (* GT *);
  271 (* GEQ *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* MULT *);
  275 (* OPP *);
  276 (* LET *);
  277 (* DIST *);
  278 (* BBT *);
  279 (* BITOF *);
  280 (* BVAND *);
  281 (* BVOR *);
  282 (* BVXOR *);
  283 (* BVADD *);
  284 (* BVMUL *);
  285 (* BVULT *);
  286 (* BVSLT *);
  287 (* BVULE *);
  288 (* BVSLE *);
  289 (* BVCONC *);
  290 (* BVEXTR *);
  291 (* BVZEXT *);
  292 (* BVSEXT *);
  293 (* BVNOT *);
  294 (* BVNEG *);
  295 (* SELECT *);
  296 (* STORE *);
  297 (* DIFF *);
  298 (* BVSHL *);
  299 (* BVSHR *);
  300 (* TBOOL *);
  301 (* TINT *);
  303 (* INPU *);
  304 (* DEEP *);
  305 (* TRUE *);
  306 (* FALS *);
  307 (* ANDP *);
  308 (* ANDN *);
  309 (* ORP *);
  310 (* ORN *);
  311 (* XORP1 *);
  312 (* XORP2 *);
  313 (* XORN1 *);
  314 (* XORN2 *);
  315 (* IMPP *);
  316 (* IMPN1 *);
  317 (* IMPN2 *);
  318 (* EQUP1 *);
  319 (* EQUP2 *);
  320 (* EQUN1 *);
  321 (* EQUN2 *);
  322 (* ITEP1 *);
  323 (* ITEP2 *);
  324 (* ITEN1 *);
  325 (* ITEN2 *);
  326 (* EQRE *);
  327 (* EQTR *);
  328 (* EQCO *);
  329 (* EQCP *);
  330 (* DLGE *);
  331 (* LAGE *);
  332 (* LATA *);
  333 (* DLDE *);
  334 (* LADE *);
  335 (* FINS *);
  336 (* EINS *);
  337 (* SKEA *);
  338 (* SKAA *);
  339 (* QNTS *);
  340 (* QNTM *);
  341 (* RESO *);
  342 (* WEAK *);
  343 (* AND *);
  344 (* NOR *);
  345 (* OR *);
  346 (* NAND *);
  347 (* XOR1 *);
  348 (* XOR2 *);
  349 (* NXOR1 *);
  350 (* NXOR2 *);
  351 (* IMP *);
  352 (* NIMP1 *);
  353 (* NIMP2 *);
  354 (* EQU1 *);
  355 (* EQU2 *);
  356 (* NEQU1 *);
  357 (* NEQU2 *);
  358 (* ITE1 *);
  359 (* ITE2 *);
  360 (* NITE1 *);
  361 (* NITE2 *);
  362 (* TPAL *);
  363 (* TLAP *);
  364 (* TPLE *);
  365 (* TPNE *);
  366 (* TPDE *);
  367 (* TPSA *);
  368 (* TPIE *);
  369 (* TPMA *);
  370 (* TPBR *);
  371 (* TPBE *);
  372 (* TPSC *);
  373 (* TPPP *);
  374 (* TPQT *);
  375 (* TPQS *);
  376 (* TPSK *);
  377 (* SUBP *);
  378 (* FLAT *);
  379 (* HOLE *);
  380 (* FORALL *);
  381 (* BBVA *);
  382 (* BBCONST *);
  383 (* BBEXTR *);
  384 (* BBZEXT *);
  385 (* BBSEXT *);
  386 (* BBEQ *);
  387 (* BBDIS *);
  388 (* BBOP *);
  389 (* BBADD *);
  390 (* BBMUL *);
  391 (* BBULT *);
  392 (* BBSLT *);
  393 (* BBNOT *);
  394 (* BBNEG *);
  395 (* BBCONC *);
  396 (* ROW1 *);
  397 (* ROW2 *);
  398 (* EXTE *);
  399 (* BBSHL *);
  400 (* BBSHR *);
    0|]

let yytransl_block = [|
  302 (* TINDEX *);
  401 (* INT *);
  402 (* SHARPINT *);
  403 (* BIGINT *);
  404 (* VAR *);
  405 (* BINDVAR *);
  406 (* ATVAR *);
  407 (* BITV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\007\000\007\000\
\006\000\006\000\009\000\010\000\010\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\012\000\012\000\
\012\000\013\000\013\000\005\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\014\000\
\014\000\016\000\016\000\015\000\015\000\004\000\017\000\017\000\
\000\000"

let yylen = "\002\000\
\001\000\007\000\008\000\014\000\018\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\003\000\001\000\002\000\
\001\000\004\000\004\000\001\000\001\000\001\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\005\000\005\000\003\000\001\000\001\000\002\000\
\002\000\002\000\002\000\002\000\001\000\005\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\003\000\002\000\003\000\003\000\003\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\003\000\003\000\003\000\003\000\004\000\
\001\000\002\000\003\000\003\000\003\000\005\000\001\000\001\000\
\004\000\004\000\005\000\001\000\002\000\001\000\001\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\000\000\185\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\000\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\006\000\073\000\074\000\075\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\093\000\094\000\
\095\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\098\000\099\000\100\000\096\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\101\000\113\000\114\000\117\000\000\000\118\000\108\000\116\000\
\109\000\112\000\000\000\000\000\105\000\115\000\000\000\000\000\
\000\000\182\000\000\000\000\000\000\000\000\000\104\000\102\000\
\002\000\184\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\000\000\106\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\126\000\127\000\000\000\000\000\000\000\135\000\136\000\000\000\
\175\000\137\000\133\000\000\000\000\000\000\000\000\000\000\000\
\131\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\147\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\
\153\000\000\000\000\000\000\000\000\000\000\000\128\000\129\000\
\130\000\170\000\111\000\000\000\000\000\000\000\000\000\125\000\
\000\000\171\000\173\000\172\000\138\000\139\000\140\000\141\000\
\142\000\144\000\143\000\000\000\000\000\181\000\000\000\148\000\
\150\000\151\000\152\000\154\000\155\000\156\000\157\000\158\000\
\159\000\162\000\000\000\164\000\165\000\166\000\000\000\167\000\
\160\000\161\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\000\168\000\000\000\120\000\119\000\121\000\
\000\000\000\000\176\000\124\000\000\000\107\000\000\000\174\000\
\134\000\000\000\000\000\000\000\004\000\000\000\000\000\123\000\
\000\000\179\000\000\000\177\000\000\000\005\000"

let yydgoto = "\002\000\
\005\000\105\000\109\000\129\000\195\000\123\000\124\000\125\000\
\205\000\126\000\196\000\041\001\246\000\044\001\216\000\005\001\
\130\000"

let yysindex = "\001\000\
\002\255\000\000\000\000\048\255\000\000\001\255\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\255\162\254\174\254\045\255\254\254\067\255\071\255\068\255\
\000\000\000\000\000\000\000\000\072\255\000\000\000\000\000\000\
\000\000\000\000\052\255\073\255\000\000\000\000\076\255\190\254\
\075\255\000\000\077\255\078\255\052\255\079\255\000\000\000\000\
\000\000\000\000\084\255\000\255\222\254\086\255\253\254\000\000\
\089\255\092\255\093\255\000\000\253\254\052\255\052\255\059\255\
\004\255\004\255\004\255\004\255\004\255\004\255\004\255\004\255\
\095\255\004\255\004\255\208\254\004\255\004\255\004\255\004\255\
\004\255\004\255\004\255\004\255\004\255\004\255\211\254\214\254\
\215\254\004\255\004\255\004\255\004\255\004\255\004\255\004\255\
\000\000\000\000\052\255\052\255\052\255\000\000\000\000\004\255\
\000\000\000\000\000\000\105\255\103\255\108\255\109\255\110\255\
\000\000\000\000\114\255\059\255\052\255\004\255\004\255\004\255\
\004\255\004\255\004\255\004\255\000\000\113\255\004\255\000\000\
\107\255\004\255\004\255\004\255\004\255\004\255\004\255\004\255\
\004\255\004\255\004\255\004\255\231\254\004\255\004\255\000\000\
\000\000\004\255\004\255\004\255\004\255\004\255\000\000\000\000\
\000\000\000\000\000\000\233\254\168\254\119\255\236\254\000\000\
\052\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\234\254\121\255\000\000\052\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\255\000\000\000\000\000\000\004\255\000\000\
\000\000\000\000\124\255\013\255\069\255\125\255\126\255\069\255\
\004\255\127\255\000\000\000\000\052\255\000\000\000\000\000\000\
\128\255\120\255\000\000\000\000\131\255\000\000\130\255\000\000\
\000\000\132\255\108\255\052\255\000\000\113\255\133\255\000\000\
\134\255\000\000\135\255\000\000\140\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\255\000\000\000\000\000\000\
\000\000\000\000\060\255\000\000\000\000\000\000\000\000\151\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\153\255\000\000\000\000\000\000\154\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\255\000\000\000\000\157\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\251\255\123\255\174\255\069\000\
\215\255\175\255\016\000\000\000\115\255\136\255\112\255\116\255\
\039\000"

let yytablesize = 456
let yytable = "\142\000\
\149\000\001\000\127\000\003\000\007\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\174\000\175\000\176\000\
\177\000\178\000\179\000\180\000\181\000\182\000\183\000\184\000\
\135\000\110\000\110\000\110\000\110\000\185\000\186\000\242\000\
\112\000\113\000\006\000\110\000\114\000\115\000\106\000\112\000\
\038\001\039\001\040\001\119\000\107\000\121\000\203\000\111\000\
\103\000\108\000\103\000\201\000\202\000\131\000\006\001\252\000\
\042\001\132\000\134\000\133\000\137\000\136\000\128\000\139\000\
\140\000\141\000\143\000\187\000\144\000\188\000\110\000\110\000\
\145\000\146\000\148\000\189\000\197\000\114\000\115\000\198\000\
\218\000\199\000\214\000\229\000\114\000\115\000\230\000\231\000\
\239\000\240\000\241\000\114\000\115\000\243\000\244\000\245\000\
\007\001\247\000\248\000\031\001\004\001\114\000\115\000\019\001\
\146\000\249\000\027\001\029\001\030\001\033\001\032\001\052\001\
\037\001\045\001\046\001\053\001\051\001\049\001\054\001\147\000\
\055\001\059\001\060\001\061\001\062\001\190\000\128\000\191\000\
\192\000\193\000\004\000\194\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\183\000\169\000\145\000\180\000\050\001\
\122\000\178\000\251\000\028\001\200\000\056\001\138\000\047\001\
\000\000\058\001\000\000\000\000\000\000\000\000\057\001\000\000\
\000\000\000\000\000\000\000\000\034\001\000\000\110\000\110\000\
\110\000\110\000\110\000\110\000\110\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\116\000\117\000\118\000\119\000\120\000\
\121\000\122\000\000\000\000\000\000\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\204\000\206\000\207\000\208\000\
\209\000\210\000\211\000\212\000\213\000\000\000\215\000\217\000\
\000\000\219\000\220\000\221\000\222\000\223\000\224\000\225\000\
\226\000\227\000\228\000\000\000\000\000\000\000\232\000\233\000\
\234\000\235\000\236\000\237\000\238\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\250\000\000\000\253\000\254\000\255\000\000\001\001\001\002\001\
\003\001\000\000\000\000\215\000\000\000\000\000\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\000\000\000\000\022\001\023\001\
\024\001\025\001\026\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\001\
\000\000\000\000\000\000\036\001\000\000\000\000\000\000\000\000\
\000\000\043\001\000\000\000\000\043\001\048\001\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\000\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000"

let yycheck = "\133\000\
\004\001\001\000\005\001\002\001\004\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\123\000\004\001\005\001\006\001\007\001\049\001\050\001\192\000\
\004\001\005\001\003\001\146\001\049\001\050\001\004\001\004\001\
\044\001\045\001\046\001\148\001\004\001\150\001\004\001\146\001\
\005\001\004\001\007\001\150\000\151\000\003\001\215\000\205\000\
\004\001\003\001\003\001\008\001\001\001\005\001\145\001\005\001\
\004\001\004\001\004\001\087\001\001\001\089\001\049\001\050\001\
\089\001\124\001\005\001\095\001\004\001\049\001\050\001\004\001\
\145\001\005\001\004\001\145\001\049\001\050\001\145\001\145\001\
\187\000\188\000\189\000\049\001\050\001\005\001\008\001\004\001\
\006\001\005\001\005\001\249\000\004\001\049\001\050\001\145\001\
\124\001\008\001\146\001\005\001\145\001\005\001\149\001\008\001\
\005\001\005\001\005\001\001\001\005\001\007\001\005\001\141\000\
\005\001\005\001\005\001\005\001\001\001\145\001\145\001\147\001\
\148\001\149\001\145\001\151\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\005\001\005\001\005\001\005\001\037\001\
\005\001\005\001\204\000\245\000\149\000\051\001\128\000\032\001\
\255\255\054\001\255\255\255\255\255\255\255\255\052\001\255\255\
\255\255\255\255\255\255\255\255\007\001\255\255\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\145\001\146\001\147\001\
\148\001\149\001\150\001\151\001\145\001\146\001\147\001\148\001\
\149\001\150\001\151\001\145\001\146\001\147\001\148\001\149\001\
\150\001\151\001\255\255\255\255\255\255\145\001\146\001\147\001\
\148\001\149\001\150\001\151\001\152\000\153\000\154\000\155\000\
\156\000\157\000\158\000\159\000\160\000\255\255\162\000\163\000\
\255\255\165\000\166\000\167\000\168\000\169\000\170\000\171\000\
\172\000\173\000\174\000\255\255\255\255\255\255\178\000\179\000\
\180\000\181\000\182\000\183\000\184\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\192\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\204\000\255\255\206\000\207\000\208\000\209\000\210\000\211\000\
\212\000\255\255\255\255\215\000\255\255\255\255\218\000\219\000\
\220\000\221\000\222\000\223\000\224\000\225\000\226\000\227\000\
\228\000\255\255\230\000\231\000\255\255\255\255\234\000\235\000\
\236\000\237\000\238\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\032\001\033\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\094\001\095\001\096\001\
\097\001\098\001\099\001\100\001\101\001\102\001\103\001\104\001\
\105\001\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\113\001\114\001\115\001\116\001\117\001\118\001\119\001\120\001\
\121\001\122\001\123\001\255\255\125\001\126\001\127\001\128\001\
\129\001\130\001\131\001\132\001\133\001\134\001\135\001\136\001\
\137\001\138\001\139\001\140\001\141\001\142\001\143\001\144\001"

let yynames_const = "\
  EOL\000\
  SAT\000\
  COLON\000\
  LPAR\000\
  RPAR\000\
  LBRACKET\000\
  RBRACKET\000\
  NOT\000\
  XOR\000\
  ITE\000\
  EQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  OPP\000\
  LET\000\
  DIST\000\
  BBT\000\
  BITOF\000\
  BVAND\000\
  BVOR\000\
  BVXOR\000\
  BVADD\000\
  BVMUL\000\
  BVULT\000\
  BVSLT\000\
  BVULE\000\
  BVSLE\000\
  BVCONC\000\
  BVEXTR\000\
  BVZEXT\000\
  BVSEXT\000\
  BVNOT\000\
  BVNEG\000\
  SELECT\000\
  STORE\000\
  DIFF\000\
  BVSHL\000\
  BVSHR\000\
  TBOOL\000\
  TINT\000\
  INPU\000\
  DEEP\000\
  TRUE\000\
  FALS\000\
  ANDP\000\
  ANDN\000\
  ORP\000\
  ORN\000\
  XORP1\000\
  XORP2\000\
  XORN1\000\
  XORN2\000\
  IMPP\000\
  IMPN1\000\
  IMPN2\000\
  EQUP1\000\
  EQUP2\000\
  EQUN1\000\
  EQUN2\000\
  ITEP1\000\
  ITEP2\000\
  ITEN1\000\
  ITEN2\000\
  EQRE\000\
  EQTR\000\
  EQCO\000\
  EQCP\000\
  DLGE\000\
  LAGE\000\
  LATA\000\
  DLDE\000\
  LADE\000\
  FINS\000\
  EINS\000\
  SKEA\000\
  SKAA\000\
  QNTS\000\
  QNTM\000\
  RESO\000\
  WEAK\000\
  AND\000\
  NOR\000\
  OR\000\
  NAND\000\
  XOR1\000\
  XOR2\000\
  NXOR1\000\
  NXOR2\000\
  IMP\000\
  NIMP1\000\
  NIMP2\000\
  EQU1\000\
  EQU2\000\
  NEQU1\000\
  NEQU2\000\
  ITE1\000\
  ITE2\000\
  NITE1\000\
  NITE2\000\
  TPAL\000\
  TLAP\000\
  TPLE\000\
  TPNE\000\
  TPDE\000\
  TPSA\000\
  TPIE\000\
  TPMA\000\
  TPBR\000\
  TPBE\000\
  TPSC\000\
  TPPP\000\
  TPQT\000\
  TPQS\000\
  TPSK\000\
  SUBP\000\
  FLAT\000\
  HOLE\000\
  FORALL\000\
  BBVA\000\
  BBCONST\000\
  BBEXTR\000\
  BBZEXT\000\
  BBSEXT\000\
  BBEQ\000\
  BBDIS\000\
  BBOP\000\
  BBADD\000\
  BBMUL\000\
  BBULT\000\
  BBSLT\000\
  BBNOT\000\
  BBNEG\000\
  BBCONC\000\
  ROW1\000\
  ROW2\000\
  EXTE\000\
  BBSHL\000\
  BBSHR\000\
  "

let yynames_block = "\
  TINDEX\000\
  INT\000\
  SHARPINT\000\
  BIGINT\000\
  VAR\000\
  BINDVAR\000\
  ATVAR\000\
  BITV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "z3/z3Parser.mly"
                                                           ( raise Sat )
# 815 "z3/z3Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'clause) in
    Obj.repr(
# 62 "z3/z3Parser.mly"
                                                           ( mk_clause (_1,_4,_5,[]) )
# 824 "z3/z3Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'clause) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'clause_ids_params) in
    Obj.repr(
# 63 "z3/z3Parser.mly"
                                                           ( mk_clause (_1,_4,_5,_6) )
# 834 "z3/z3Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 8 : int) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'forall_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 64 "z3/z3Parser.mly"
                                                                                    ( add_solver _6 _9; add_ref _6 _1; mk_clause (_1, Tpqt, [], [_12]) )
# 844 "z3/z3Parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 17 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 12 : int) in
    let _12 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _14 = (Parsing.peek_val __caml_parser_env 4 : 'lit) in
    Obj.repr(
# 66 "z3/z3Parser.mly"
  ( mk_clause (_1, Fins, [snd _14], [get_ref _12]) )
# 854 "z3/z3Parser.ml"
               : int))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "z3/z3Parser.mly"
                                                           ( Tpbr  )
# 860 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "z3/z3Parser.mly"
                                                           ( Inpu  )
# 866 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "z3/z3Parser.mly"
                                                           ( Deep  )
# 872 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "z3/z3Parser.mly"
                                                           ( True  )
# 878 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "z3/z3Parser.mly"
                                                           ( Fals  )
# 884 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "z3/z3Parser.mly"
                                                           ( Andp  )
# 890 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "z3/z3Parser.mly"
                                                           ( Andn  )
# 896 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "z3/z3Parser.mly"
                                                           ( Orp   )
# 902 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "z3/z3Parser.mly"
                                                           ( Orn   )
# 908 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "z3/z3Parser.mly"
                                                           ( Xorp1 )
# 914 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "z3/z3Parser.mly"
                                                           ( Xorp2 )
# 920 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "z3/z3Parser.mly"
                                                           ( Xorn1 )
# 926 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "z3/z3Parser.mly"
                                                           ( Xorn2 )
# 932 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "z3/z3Parser.mly"
                                                           ( Impp  )
# 938 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "z3/z3Parser.mly"
                                                           ( Impn1 )
# 944 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "z3/z3Parser.mly"
                                                           ( Impn2 )
# 950 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "z3/z3Parser.mly"
                                                           ( Equp1 )
# 956 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "z3/z3Parser.mly"
                                                           ( Equp2 )
# 962 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "z3/z3Parser.mly"
                                                           ( Equn1 )
# 968 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "z3/z3Parser.mly"
                                                           ( Equn2 )
# 974 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "z3/z3Parser.mly"
                                                           ( Itep1 )
# 980 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "z3/z3Parser.mly"
                                                           ( Itep2 )
# 986 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "z3/z3Parser.mly"
                                                           ( Iten1 )
# 992 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "z3/z3Parser.mly"
                                                           ( Iten2 )
# 998 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "z3/z3Parser.mly"
                                                           ( Eqre  )
# 1004 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "z3/z3Parser.mly"
                                                           ( Eqtr  )
# 1010 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "z3/z3Parser.mly"
                                                           ( Eqco  )
# 1016 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "z3/z3Parser.mly"
                                                           ( Eqcp  )
# 1022 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "z3/z3Parser.mly"
                                                           ( Dlge  )
# 1028 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "z3/z3Parser.mly"
                                                           ( Lage  )
# 1034 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "z3/z3Parser.mly"
                                                           ( Lata  )
# 1040 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "z3/z3Parser.mly"
                                                           ( Dlde  )
# 1046 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "z3/z3Parser.mly"
                                                           ( Lade  )
# 1052 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "z3/z3Parser.mly"
                                                           ( Eins  )
# 1058 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "z3/z3Parser.mly"
                                                           ( Skea  )
# 1064 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "z3/z3Parser.mly"
                                                           ( Skaa  )
# 1070 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "z3/z3Parser.mly"
                                                           ( Qnts  )
# 1076 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "z3/z3Parser.mly"
                                                           ( Qntm  )
# 1082 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "z3/z3Parser.mly"
                                                           ( Reso  )
# 1088 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "z3/z3Parser.mly"
                                                           ( Weak  )
# 1094 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "z3/z3Parser.mly"
                                                           ( And   )
# 1100 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "z3/z3Parser.mly"
                                                           ( Nor   )
# 1106 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "z3/z3Parser.mly"
                                                           ( Or    )
# 1112 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "z3/z3Parser.mly"
                                                           ( Nand  )
# 1118 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "z3/z3Parser.mly"
                                                           ( Xor1  )
# 1124 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "z3/z3Parser.mly"
                                                           ( Xor2  )
# 1130 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "z3/z3Parser.mly"
                                                           ( Nxor1 )
# 1136 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "z3/z3Parser.mly"
                                                           ( Nxor2 )
# 1142 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "z3/z3Parser.mly"
                                                           ( Imp   )
# 1148 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "z3/z3Parser.mly"
                                                           ( Nimp1 )
# 1154 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "z3/z3Parser.mly"
                                                           ( Nimp2 )
# 1160 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "z3/z3Parser.mly"
                                                           ( Equ1  )
# 1166 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "z3/z3Parser.mly"
                                                           ( Equ2  )
# 1172 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "z3/z3Parser.mly"
                                                           ( Nequ1 )
# 1178 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "z3/z3Parser.mly"
                                                           ( Nequ2 )
# 1184 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "z3/z3Parser.mly"
                                                           ( Ite1  )
# 1190 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "z3/z3Parser.mly"
                                                           ( Ite2  )
# 1196 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "z3/z3Parser.mly"
                                                           ( Nite1 )
# 1202 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "z3/z3Parser.mly"
                                                           ( Nite2 )
# 1208 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "z3/z3Parser.mly"
                                                           ( Tpal  )
# 1214 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "z3/z3Parser.mly"
                                                           ( Tlap  )
# 1220 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "z3/z3Parser.mly"
                                                           ( Tple  )
# 1226 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "z3/z3Parser.mly"
                                                           ( Tpne  )
# 1232 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "z3/z3Parser.mly"
                                                           ( Tpde  )
# 1238 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "z3/z3Parser.mly"
                                                           ( Tpsa  )
# 1244 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "z3/z3Parser.mly"
                                                           ( Tpie  )
# 1250 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "z3/z3Parser.mly"
                                                           ( Tpma  )
# 1256 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "z3/z3Parser.mly"
                                                           ( Tpbe  )
# 1262 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "z3/z3Parser.mly"
                                                           ( Tpsc  )
# 1268 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "z3/z3Parser.mly"
                                                           ( Tppp  )
# 1274 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "z3/z3Parser.mly"
                                                           ( Tpqs  )
# 1280 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "z3/z3Parser.mly"
                                                           ( Tpsk  )
# 1286 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "z3/z3Parser.mly"
                                                           ( Subp  )
# 1292 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "z3/z3Parser.mly"
                                                           ( Flat  )
# 1298 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "z3/z3Parser.mly"
                                                           ( Hole  )
# 1304 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "z3/z3Parser.mly"
                                                           ( Bbva  )
# 1310 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "z3/z3Parser.mly"
                                                           ( Bbconst )
# 1316 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "z3/z3Parser.mly"
                                                           ( Bbeq  )
# 1322 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "z3/z3Parser.mly"
                                                           ( Bbdis )
# 1328 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "z3/z3Parser.mly"
                                                           ( Bbop  )
# 1334 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "z3/z3Parser.mly"
                                                           ( Bbadd )
# 1340 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "z3/z3Parser.mly"
                                                           ( Bbmul )
# 1346 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "z3/z3Parser.mly"
                                                           ( Bbult )
# 1352 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "z3/z3Parser.mly"
                                                           ( Bbslt )
# 1358 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "z3/z3Parser.mly"
                                                           ( Bbnot )
# 1364 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "z3/z3Parser.mly"
                                                           ( Bbneg )
# 1370 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "z3/z3Parser.mly"
                                                           ( Bbconc )
# 1376 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "z3/z3Parser.mly"
                                                           ( Bbextr )
# 1382 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "z3/z3Parser.mly"
                                                           ( Bbzext )
# 1388 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "z3/z3Parser.mly"
                                                           ( Bbsext )
# 1394 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "z3/z3Parser.mly"
                                                           ( Bbshl )
# 1400 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "z3/z3Parser.mly"
                                                           ( Bbshr )
# 1406 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "z3/z3Parser.mly"
                                                           ( Row1  )
# 1412 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "z3/z3Parser.mly"
                                                           ( Row2  )
# 1418 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "z3/z3Parser.mly"
                                                           ( Exte  )
# 1424 "z3/z3Parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "z3/z3Parser.mly"
                                                           ( [] )
# 1430 "z3/z3Parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lit_list) in
    Obj.repr(
# 169 "z3/z3Parser.mly"
                                                           ( let _, l = list_dec _2 in l )
# 1437 "z3/z3Parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 173 "z3/z3Parser.mly"
                                                           ( [_1] )
# 1444 "z3/z3Parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 174 "z3/z3Parser.mly"
                                                           ( _1::_2 )
# 1452 "z3/z3Parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 178 "z3/z3Parser.mly"
                                                           ( let decl, t = _1 in decl, Form.lit_of_atom_form_lit rf (decl, t) )
# 1459 "z3/z3Parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lit) in
    Obj.repr(
# 179 "z3/z3Parser.mly"
                                                           ( apply_dec Form.neg _3 )
# 1466 "z3/z3Parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lit) in
    Obj.repr(
# 183 "z3/z3Parser.mly"
                                                           ( apply_dec Form.neg _3 )
# 1473 "z3/z3Parser.ml"
               : 'nlit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 187 "z3/z3Parser.mly"
                                             ( _1 )
# 1480 "z3/z3Parser.ml"
               : 'var_atvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 188 "z3/z3Parser.mly"
                                       ( _1 )
# 1487 "z3/z3Parser.ml"
               : 'var_atvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 192 "z3/z3Parser.mly"
                                                          ( get_solver _1 )
# 1494 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 193 "z3/z3Parser.mly"
                                                          ( let res = _4 in add_solver _1 res; res )
# 1502 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.mk_bvconst ra (parse_bv _1)) )
# 1509 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "z3/z3Parser.mly"
                                                           ( true, Form.Form Form.pform_true )
# 1515 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "z3/z3Parser.mly"
                                                           ( true, Form.Form Form.pform_false )
# 1521 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_atvar) in
    Obj.repr(
# 197 "z3/z3Parser.mly"
                      ( let x = _1 in match find_opt_qvar x with
    					                   | Some bt -> false, Form.Atom (Atom.get ~declare:false ra (Aapp (dummy_indexed_op (Rel_name x) [||] bt, [||])))
							   | None -> true, Form.Atom (Atom.get ra (Aapp (SmtMaps.get_fun _1, [||]))) )
# 1530 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 200 "z3/z3Parser.mly"
                                                           ( true, Hashtbl.find hlets _1 )
# 1537 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 201 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.hatom_Z_of_int ra _1) )
# 1544 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Big_int.big_int) in
    Obj.repr(
# 202 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.hatom_Z_of_bigint ra _1) )
# 1551 "z3/z3Parser.ml"
               : 'name_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "z3/z3Parser.mly"
                 ( TZ )
# 1557 "z3/z3Parser.ml"
               : 'tvar))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "z3/z3Parser.mly"
                  ( Tbool )
# 1563 "z3/z3Parser.ml"
               : 'tvar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 208 "z3/z3Parser.mly"
                                                           ( Tindex (indexed_type_of_int _1) )
# 1570 "z3/z3Parser.ml"
               : 'tvar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var_atvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tvar) in
    Obj.repr(
# 212 "z3/z3Parser.mly"
                                   ( add_qvar _2 _3; [_2, _3] )
# 1578 "z3/z3Parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var_atvar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tvar) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl_list) in
    Obj.repr(
# 213 "z3/z3Parser.mly"
                                               ( add_qvar _2 _3; (_2, _3)::_5 )
# 1587 "z3/z3Parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'var_decl_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'blit) in
    Obj.repr(
# 217 "z3/z3Parser.mly"
                                            ( clear_qvar (); false, Form.Form (Fapp (Fforall _3, [|Form.lit_of_atom_form_lit rf _5|])) )
# 1595 "z3/z3Parser.ml"
               : 'forall_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 221 "z3/z3Parser.mly"
                                                           ( _2 )
# 1602 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "z3/z3Parser.mly"
                                                           ( true, Form.Form Form.pform_true )
# 1608 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "z3/z3Parser.mly"
                                                           ( true, Form.Form Form.pform_false )
# 1614 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 226 "z3/z3Parser.mly"
                                                           ( apply_dec (fun x -> Form.Form (Fapp (Fand, Array.of_list x))) (list_dec _2) )
# 1621 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 227 "z3/z3Parser.mly"
                                                           ( apply_dec (fun x -> Form.Form (Fapp (For, Array.of_list x))) (list_dec _2) )
# 1628 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 228 "z3/z3Parser.mly"
                                                           ( apply_dec (fun x -> Form.Form (Fapp (Fimp, Array.of_list x))) (list_dec _2) )
# 1635 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 229 "z3/z3Parser.mly"
                                                           ( apply_dec (fun x -> Form.Form (Fapp (Fxor, Array.of_list x))) (list_dec _2) )
# 1642 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 230 "z3/z3Parser.mly"
                                                           ( apply_dec (fun x -> Form.Form (Fapp (Fite, Array.of_list x))) (list_dec _2) )
# 1649 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'forall_decl) in
    Obj.repr(
# 231 "z3/z3Parser.mly"
                                                           ( _1 )
# 1656 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'name_term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'lit_list) in
    Obj.repr(
# 232 "z3/z3Parser.mly"
                                                           ( let (decl, t) = _2 in let (decll, l) = list_dec _4 in (decl && decll, match t with | Form.Atom a -> Form.Form (FbbT (a, l)) | _ -> assert false) )
# 1664 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 235 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.hatom_Z_of_int ra _1) )
# 1671 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Big_int.big_int) in
    Obj.repr(
# 236 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.hatom_Z_of_bigint ra _1) )
# 1678 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 237 "z3/z3Parser.mly"
                                                           ( true, Form.Atom (Atom.mk_bvconst ra (parse_bv _1)) )
# 1685 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 238 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_lt ra) _2 _3 )
# 1693 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 239 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_le ra) _2 _3 )
# 1701 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 240 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_gt ra) _2 _3 )
# 1709 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 241 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_ge ra) _2 _3 )
# 1717 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 242 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_plus ra) _2 _3 )
# 1725 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 243 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_mult ra) _2 _3 )
# 1733 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 244 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (Atom.mk_minus ra) _2 _3)
# 1741 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 245 "z3/z3Parser.mly"
                                                           ( apply_dec_atom (fun ?declare:d a -> Atom.mk_neg ra a) _2 )
# 1748 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 246 "z3/z3Parser.mly"
                                                           ( apply_dec_atom (Atom.mk_opp ra) _2 )
# 1755 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 247 "z3/z3Parser.mly"
                                                           ( let da, la = list_dec _2 in
    	 						     let a = Array.of_list la in
                                                             da, Form.Atom (Atom.mk_distinct ra ~declare:da (Atom.type_of a.(0)) a) )
# 1764 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 250 "z3/z3Parser.mly"
                                                           ( apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bitof ra ~declare:d s _2 h | _ -> assert false) _3 )
# 1772 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 251 "z3/z3Parser.mly"
                                                           ( apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bvnot ra ~declare:d s h | _ -> assert false) _2 )
# 1779 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 252 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvand ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1787 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 253 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvor ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1795 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 254 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvxor ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1803 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 255 "z3/z3Parser.mly"
                                                           ( apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bvneg ra ~declare:d s h | _ -> assert false) _2 )
# 1810 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 256 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvadd ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1818 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 257 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvmult ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1826 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 258 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvult ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1834 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 259 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvslt ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1842 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 260 "z3/z3Parser.mly"
                                                           ( let (decl,_) as a = apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvult ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 in (decl, Form.Lit (Form.neg (Form.lit_of_atom_form_lit rf a))) )
# 1850 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 261 "z3/z3Parser.mly"
                                                           ( let (decl,_) as a = apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvslt ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 in (decl, Form.Lit (Form.neg (Form.lit_of_atom_form_lit rf a))) )
# 1858 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 262 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvshl ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1866 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 263 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TBV s -> Atom.mk_bvshr ra ~declare:d s h1 h2 | _ -> assert false) _2 _3 )
# 1874 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 264 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1, Atom.type_of h2 with TBV s1, TBV s2 -> Atom.mk_bvconcat ra ~declare:d s1 s2 h1 h2 | _, _ -> assert false) _2 _3 )
# 1882 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 265 "z3/z3Parser.mly"
                                                           ( let j, i = _2, _3 in apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bvextr ra ~declare:d ~s ~i ~n:(j-i+1) h | _ -> assert false) _4 )
# 1891 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 266 "z3/z3Parser.mly"
                                                           ( let n = _2 in apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bvzextn ra ~declare:d ~s ~n h | _ -> assert false) _3 )
# 1899 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 267 "z3/z3Parser.mly"
                                                           ( let n = _2 in apply_dec_atom (fun ?declare:(d=true) h -> match Atom.type_of h with TBV s -> Atom.mk_bvsextn ra ~declare:d ~s ~n h | _ -> assert false) _3 )
# 1907 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 268 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TFArray (ti, te) -> Atom.mk_select ra ~declare:d ti te h1 h2 | _ -> assert false) _2 _3 )
# 1915 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 269 "z3/z3Parser.mly"
                                                           ( apply_bdec_atom (fun ?declare:(d=true) h1 h2 -> match Atom.type_of h1 with TFArray (ti, te) -> Atom.mk_diffarray ra ~declare:d ti te h1 h2 | _ -> assert false) _2 _3 )
# 1923 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 270 "z3/z3Parser.mly"
                                                           ( apply_tdec_atom (fun ?declare:(d=true) h1 h2 h3 -> match Atom.type_of h1 with TFArray (ti, te) -> Atom.mk_store ra ~declare:d ti te h1 h2 h3 | _ -> assert false) _2 _3 _4 )
# 1932 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 271 "z3/z3Parser.mly"
                                                           ( let x = _1 in match find_opt_qvar x with | Some bt -> false, Form.Atom (Atom.get ~declare:false ra (Aapp (dummy_indexed_op (Rel_name x) [||] bt, [||]))) | None -> true, Form.Atom (Atom.get ra (Aapp (SmtMaps.get_fun _1, [||]))) )
# 1939 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 272 "z3/z3Parser.mly"
                                                           ( let f = _1 in let a = _2 in match find_opt_qvar f with | Some bt -> let op = dummy_indexed_op (Rel_name f) [||] bt in false, Form.Atom (Atom.get ~declare:false ra (Aapp (op, Array.of_list (snd (list_dec a))))) | None -> let dl, l = list_dec _2 in dl, Form.Atom (Atom.get ra ~declare:dl (Aapp (SmtMaps.get_fun f, Array.of_list l))) )
# 1947 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 275 "z3/z3Parser.mly"
                                                           ( let t1 = _2 in let t2 = _3 in match t1,t2 with | (decl1, Form.Atom h1), (decl2, Form.Atom h2) when (match Atom.type_of h1 with | SmtBtype.Tbool -> false | _ -> true) -> let decl = decl1 && decl2 in decl, Form.Atom (Atom.mk_eq_sym ra ~declare:decl (Atom.type_of h1) h1 h2) | (decl1, t1), (decl2, t2) -> decl1 && decl2, Form.Form (Fapp (Fiff, [|Form.lit_of_atom_form_lit rf (decl1, t1); Form.lit_of_atom_form_lit rf (decl2, t2)|])) )
# 1955 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nlit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 276 "z3/z3Parser.mly"
                                                           ( match _2, _3 with (decl1, t1), (decl2, t2) -> decl1 && decl2, Form.Form (Fapp (Fiff, [|t1; t2|])) )
# 1963 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nlit) in
    Obj.repr(
# 277 "z3/z3Parser.mly"
                                                           ( match _2, _3 with (decl1, t1), (decl2, t2) -> decl1 && decl2, Form.Form (Fapp (Fiff, [|Form.lit_of_atom_form_lit rf (decl1, t1); t2|])) )
# 1971 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bindlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 278 "z3/z3Parser.mly"
                                                           ( _3; _5 )
# 1979 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 279 "z3/z3Parser.mly"
                                                           ( true, Hashtbl.find hlets _1 )
# 1986 "z3/z3Parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 283 "z3/z3Parser.mly"
                                                           ( _1 )
# 1993 "z3/z3Parser.ml"
               : 'blit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lit) in
    Obj.repr(
# 284 "z3/z3Parser.mly"
                                                           ( apply_dec (fun l -> Form.Lit (Form.neg l)) _3 )
# 2000 "z3/z3Parser.ml"
               : 'blit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'blit) in
    Obj.repr(
# 288 "z3/z3Parser.mly"
                                                      ( Hashtbl.add hlets _2 (snd _3) )
# 2008 "z3/z3Parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'blit) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bindlist) in
    Obj.repr(
# 289 "z3/z3Parser.mly"
                                                           ( Hashtbl.add hlets _2 (snd _3); _5 )
# 2017 "z3/z3Parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_term) in
    Obj.repr(
# 292 "z3/z3Parser.mly"
                                                           ( match _1 with decl, Form.Atom h -> [decl, h] | _ -> assert false )
# 2024 "z3/z3Parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name_term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 293 "z3/z3Parser.mly"
                                                           ( match _1 with decl, Form.Atom h -> (decl, h)::_2 | _ -> assert false )
# 2032 "z3/z3Parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'int_list) in
    Obj.repr(
# 297 "z3/z3Parser.mly"
                                                           ( _1 )
# 2039 "z3/z3Parser.ml"
               : 'clause_ids_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 301 "z3/z3Parser.mly"
                                                           ( [_1] )
# 2046 "z3/z3Parser.ml"
               : 'int_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'int_list) in
    Obj.repr(
# 302 "z3/z3Parser.mly"
                                                           ( let x1 = _1 in let x2 = _2 in x1::x2 )
# 2054 "z3/z3Parser.ml"
               : 'int_list))
(* Entry line *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let line (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int)
